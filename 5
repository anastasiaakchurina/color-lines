import random
import pygame
import sys
import os

pygame.init()
size = 620, 720
screen = pygame.display.set_mode(size)
color = ['red', 'orange', 'green', 'blue', 'yellow']
FPS = 50
clock = pygame.time.Clock()


class Board:

    def __init__(self, width, height, n, length_limit, left=10, top=10, cell_size=30):
        self.width = width
        self.height = height
        self.n = n
        self.length_limit = length_limit
        self.board = [[-1] * width for _ in range(height)]

        self.left = 0
        self.top = 0
        self.cell_size = 0
        self.set_view(left, top, cell_size)
        self.cell_color = -1
        self.cell_x = 0
        self.cell_y = 0
        self.count = 0


    def render(self):
        for y in range(self.height):
            for x in range(self.width):
                pygame.draw.rect(screen, pygame.Color('white'),
                                 (
                                     x * self.cell_size + self.left,
                                     y * self.cell_size + self.top,
                                     self.cell_size,
                                     self.cell_size
                                 ), 1
                                 )

    # настройка внешнего вида
    def set_view(self, left, top, cell_size):
        self.left = left
        self.top = top
        self.cell_size = cell_size

    # cell - кортеж (x, y)
    def on_click(self, cell):
        # заглушка для реальных игровых полей
        pass


    def get_cell(self, mouse_pos):
        cell_x = (mouse_pos[0] - self.left) // self.cell_size
        cell_y = (mouse_pos[1] - self.top) // self.cell_size
        if cell_x < 0 or cell_x >= self.width or cell_y < 0 or cell_y >= self.height:
            return None
        return cell_x, cell_y


    def get_click(self, mouse_pos):
        cell = self.get_cell(mouse_pos)
        if cell:
            self.on_click(cell)


class Balls(Board):


    def __init__(self, width, height, n, length_limit):
        super().__init__(width, height, n, length_limit)
        self.draw_balls(n)
        self.used = [[0] * self.width for _ in range(self.height)]
        self.score = 0
        self.step = 0


    def text(self):
        font = pygame.font.Font(None, 50)
        text = font.render("Количество очков: {}".format(self.score), 1, (255, 255, 255))
        text_x = 50
        text_y = 630
        screen.blit(text, (text_x, text_y))


    def text2(self):
        font = pygame.font.Font(None, 50)
        text = font.render("Количество ходов: {}".format(self.step), 1, (255, 255, 255))
        text_x = 50
        text_y = 680
        screen.blit(text, (text_x, text_y))

    # рисуем новые шары
    def draw_balls(self, n):
        for _ in range(n):
            while self.count < self.height * self.width:
                x = random.randint(0, self.width - 1)
                y = random.randint(0, self.height - 1)
                if self.board[y][x] == -1:
                    self.count += 1
                    self.board[y][x] = random.randint(0, 4)
                    break
            if (self.count >= self.height * self.width):
                break
        self.check_balls()
        if (self.count >= self.height * self.width):
            self.board = [[-1] * self.width for _ in range(self.height)]
            self.count = 0
            self.draw_balls(self.n)

    # поиск пути
    def dfs(self, y, x):
        self.used[y][x] = 1
        dy = [-1, 0, 1, 0]
        dx = [0, 1, 0, -1]
        for i in range(4):
            new_x = x + dx[i]
            new_y = y + dy[i]
            if new_x < 0 or new_y < 0 or new_x >= self.width or new_y >= self.height:
                continue
            if not self.used[new_y][new_x] and self.board[new_y][new_x] == -1:
                self.dfs(new_y, new_x)


    def open_cell(self, cell):
        x, y = cell[0], cell[1]
        # пустая ячейка
        if (self.board[y][x] == -1):
            if (self.cell_color > -1):
                self.used = [[0] * self.width for _ in range(self.height)]
                self.dfs(self.cell_y, self.cell_x)
                if self.used[y][x]:
                    self.step += 1
                    self.board[y][x] = self.cell_color
                    self.board[self.cell_y][self.cell_x] = -1
                    self.check_balls()
                    self.cell_color = -1
                    self.draw_balls(3)
        # не пустая ячейка
        else:
            self.cell_color = self.board[y][x]
            self.cell_x = x
            self.cell_y = y

    # поиск рядов
    def check_balls(self):
        for y in range(self.height):
            for x in range(self.width - self.length_limit + 1):
                length = 0
                x2 = x
                color = self.board[y][x]
                if (color != -1):
                    while x2 < self.width and (self.board[y][x2] == color or self.board[y][x2] == -2):
                        x2 += 1
                        length += 1
                    #     нашел
                    if (length >= self.length_limit):
                        x2 = x
                        while x2 < self.width and (self.board[y][x2] == color or self.board[y][x2] == -2):
                            self.board[y][x2] = -2
                            x2 += 1

        for x in range(self.width):
            for y in range(self.height - self.length_limit + 1):
                length = 0
                y2 = y
                color = self.board[y][x]
                if (color != -1):
                    while y2 < self.height and (self.board[y2][x] == color or self.board[y2][x] == -2):
                        y2 += 1
                        length += 1
                    #     нашел
                    if (length >= self.length_limit):
                        y2 = y
                        while y2 < self.height and (self.board[y2][x] == color or self.board[y2][x] == -2):
                            self.board[y2][x] = -2
                            y2 += 1

        for x in range(self.width - self.length_limit + 1):
            for y in range(self.height - self.length_limit + 1):
                length = 0
                y2 = y
                x2 = x
                color = self.board[y2][x2]
                if (color != -1):
                    while y2 < self.height and x2 < self.width and (
                            self.board[y2][x2] == color or self.board[y2][x2] == -2):
                        y2 += 1
                        x2 += 1
                        length += 1
                    #     нашел
                    if (length >= self.length_limit):
                        y2 = y
                        x2 = x
                        while y2 < self.height and x2 < self.width and (
                                self.board[y2][x2] == color or self.board[y2][x2] == -2):
                            self.board[y2][x2] = -2
                            y2 += 1
                            x2 += 1

        for x in range(self.width - self.length_limit + 1):
            for y in range(self.height - self.length_limit + 1):
                length = 0
                y2 = y + self.length_limit - 1
                x2 = x
                color = self.board[y2][x2]
                if (color != -1):
                    while y2 > -1 and x2 < self.width and (
                            self.board[y2][x2] == color or self.board[y2][x2] == -2):
                        y2 -= 1
                        x2 += 1
                        length += 1
                    #     нашел
                    if (length >= self.length_limit):
                        y2 = y + self.length_limit - 1
                        x2 = x
                        while y2 > -1 and x2 < self.width and (
                                self.board[y2][x2] == color or self.board[y2][x2] == -2):
                            self.board[y2][x2] = -2
                            y2 -= 1
                            x2 += 1

        # подсчет длины ряда
        for y in range(self.height):
            for x in range(self.width):
                if (self.board[y][x] == -2):
                    self.count -= 1
                    self.score += 1
                    self.board[y][x] = -1


    def on_click(self, cell):
        self.open_cell(cell)


    def render(self):
        self.text2()
        self.text()
        for y in range(self.height):
            for x in range(self.width):
                pygame.draw.rect(screen, pygame.Color('white'),
                                 (
                                     x * self.cell_size + self.left,
                                     y * self.cell_size + self.top,
                                     self.cell_size,
                                     self.cell_size
                                 ), 1
                                 )
                if self.board[y][x] > -1:
                    pygame.draw.circle(screen, pygame.Color(color[self.board[y][x]]),
                                       (
                                           int((x + 0.5) * self.cell_size) + self.left,
                                           int((y + 0.5) * self.cell_size) + self.top
                                       ),
                                       int(self.cell_size / 2) - 2)


class Start_screen():


    def load_image(self, name, colorkey=None):
        fullname = os.path.join('data', name)
        try:
            image = pygame.image.load(fullname)
        except pygame.error as message:
            print('Cannot load image: ', name)
            raise SystemExit(message)
        image = image.convert_alpha()
        if colorkey is not None:
            if colorkey is -1:
                colorkey = image.get_at((0, 0))
            image.set_colorkey(colorkey)
        return image


    def terminate(self):
        pygame.quit()
        sys.exit()


    def start_screen(self):

        fon = pygame.transform.scale(self.load_image('fon.jpg'), (620, 544))
        screen.blit(fon, (0, 83))

        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.terminate()
                elif event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:
                    return  # начинаем игру
            pygame.display.flip()
            clock.tick(FPS)


scr = Start_screen()
scr.start_screen()
board = Balls(10, 10, 20, 5)
board.set_view(10, 10, 60)

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            board.get_click(event.pos)
    screen.fill((0, 0, 0))
    board.render()
    pygame.display.flip()
pygame.quit()
